pub struct Conv2d<
    const NUM_CHAN_IN: usize,
    const NUM_CHAN_OUT: usize,
    const KERNEL_SIZE: usize,
    const ROW_PADDING: usize,
    const COL_PADDING: usize,
    const STRIDE: usize,
> {
    pub weight: [[[[f32; KERNEL_SIZE]; KERNEL_SIZE]; NUM_CHAN_IN]; NUM_CHAN_OUT],
    pub bias: [f32; NUM_CHAN_OUT],
}

pub type DefaultConv2d<
    const NUM_CHAN_IN: usize,
    const NUM_CHAN_OUT: usize,
    const KERNEL_SIZE: usize,
> = Conv2d<NUM_CHAN_IN, NUM_CHAN_OUT, KERNEL_SIZE, 0, 0, 1>;

impl<
        const NUM_CHAN_IN: usize,
        const NUM_CHAN_OUT: usize,
        const KERNEL_SIZE: usize,
        const ROW_PADDING: usize,
        const COL_PADDING: usize,
        const STRIDE: usize,
    > Default for Conv2d<NUM_CHAN_IN, NUM_CHAN_OUT, KERNEL_SIZE, ROW_PADDING, COL_PADDING, STRIDE>
{
    fn default() -> Self {
        Self {
            weight: [[[[0.0; KERNEL_SIZE]; KERNEL_SIZE]; NUM_CHAN_IN]; NUM_CHAN_OUT],
            bias: [0.0; NUM_CHAN_OUT],
        }
    }
}

impl<
        const NUM_CHAN_IN: usize,
        const NUM_CHAN_OUT: usize,
        const KERNEL_SIZE: usize,
        const ROW_PADDING: usize,
        const COL_PADDING: usize,
        const STRIDE: usize,
    > Conv2d<NUM_CHAN_IN, NUM_CHAN_OUT, KERNEL_SIZE, ROW_PADDING, COL_PADDING, STRIDE>
{
    pub fn forward<const W_IN: usize, const H_IN: usize, const W_OUT: usize, const H_OUT: usize>(
        &self,
        x: &[[[f32; W_IN]; H_IN]; NUM_CHAN_IN],
    ) -> [[[f32; W_OUT]; H_OUT]; NUM_CHAN_OUT] {
        // TODO convert these to compile time calculations when that feature gets added
        assert_eq!(W_OUT, ((W_IN + 2 * COL_PADDING - KERNEL_SIZE) / STRIDE) + 1);
        assert_eq!(H_OUT, ((H_IN + 2 * ROW_PADDING - KERNEL_SIZE) / STRIDE) + 1);

        let mut y = [[[0.0; W_OUT]; H_OUT]; NUM_CHAN_OUT];
        for i_cout in 0..NUM_CHAN_OUT {
            for i_out_row in 0..H_OUT {
                for i_out_col in 0..W_OUT {
                    y[i_cout][i_out_row][i_out_col] = self.bias[i_cout];
                }
            }
        }

        for i_cout in 0..NUM_CHAN_OUT {
            for i_cin in 0..NUM_CHAN_IN {
                for i_out_row in 0..H_OUT {
                    for i_out_col in 0..W_OUT {
                        for i_k1 in 0..KERNEL_SIZE {
                            let i_in_row = i_out_row * STRIDE + i_k1;
                            if ROW_PADDING <= i_in_row && i_in_row < H_IN + ROW_PADDING {
                                for i_k2 in 0..KERNEL_SIZE {
                                    let i_in_col = i_out_col * STRIDE + i_k2;
                                    if COL_PADDING <= i_in_col && i_in_col < W_IN + COL_PADDING {
                                        let w = self.weight[i_cout][i_cin][i_k1][i_k2];
                                        let v = x[i_cin][i_in_row - ROW_PADDING]
                                            [i_in_col - COL_PADDING];
                                        y[i_cout][i_out_row][i_out_col] += w * v;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        y
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_channels() {
        let mut conv: Conv2d<2, 3, 3, 0, 0, 1> = Default::default();
        conv.weight = [
            [
                [
                    [-0.15755141, 0.22708158, -0.15798858],
                    [0.02651758, 0.02949663, 0.00168143],
                    [0.17578505, -0.00790119, -0.19205979],
                ],
                [
                    [-0.14549221, 0.18005536, -0.20870999],
                    [-0.02696078, -0.23109876, 0.08636613],
                    [-0.19711518, -0.22332281, 0.10554548],
                ],
            ],
            [
                [
                    [0.16746391, 0.15539487, 0.17933075],
                    [0.10245387, 0.17808135, 0.00389603],
                    [-0.05004337, 0.1836464, -0.10865615],
                ],
                [
                    [-0.10701959, 0.22484492, 0.02793057],
                    [-0.02405447, -0.19043699, -0.06315055],
                    [0.06873955, 0.07716306, -0.04570898],
                ],
            ],
            [
                [
                    [0.17305957, 0.04872765, 0.00382756],
                    [0.23236315, -0.09844781, 0.02772947],
                    [0.15478937, 0.1431862, 0.17355753],
                ],
                [
                    [-0.08297984, -0.06017058, -0.12197169],
                    [0.16294028, 0.10859056, -0.06415635],
                    [-0.02141872, -0.07581845, 0.21996914],
                ],
            ],
        ];
        conv.bias = [0.10084419, -0.09816569, 0.08800296];
        let x = [
            [
                [0.36798823, 0.32735145, 0.98843247],
                [0.6964252, 0.77441615, 0.2872073],
                [0.44724697, 0.34764975, 0.43664432],
            ],
            [
                [0.3974272, 0.56625223, 0.29246235],
                [0.42091078, 0.92644644, 0.7363354],
                [0.8082989, 0.3173269, 0.56485856],
            ],
        ];
        let y = conv.forward::<3, 3, 1, 1>(&x);
        let t = [[[-0.35449058]], [[0.31011194]], [[0.5618632]]];
        for i_chan in 0..3 {
            for i_row in 0..1 {
                for i_col in 0..1 {
                    assert!((y[i_chan][i_row][i_col] - t[i_chan][i_row][i_col]) < 1e-6);
                }
            }
        }
    }

    #[test]
    fn test_pad0_stride1() {
        let mut conv: Conv2d<1, 2, 2, 0, 0, 1> = Default::default();
        conv.weight = [
            [[[-0.32677823, -0.05076015], [-0.05067509, -0.4386055]]],
            [[[0.03580105, -0.22968405], [-0.0093717, -0.02110344]]],
        ];
        conv.bias = [-0.27842504, -0.13038313];
        let x = [[
            [0.31053752, 0.7199225, 0.43577182],
            [0.5588689, 0.87854236, 0.03064412],
            [0.6246787, 0.7104719, 0.34061056],
        ]];
        let y = conv.forward::<3, 3, 2, 2>(&x);
        let t = [
            [[-0.8300995, -0.5937608], [-0.84891874, -0.75246596]],
            [[-0.3083981, -0.21357912], [-0.3330099, -0.11981525]],
        ];
        for i_chan in 0..2 {
            for i_row in 0..2 {
                for i_col in 0..2 {
                    assert!((y[i_chan][i_row][i_col] - t[i_chan][i_row][i_col]) < 1e-6);
                }
            }
        }
    }

    #[test]
    fn test_pad1_stride1() {
        let mut conv: Conv2d<1, 2, 3, 1, 1, 1> = Default::default();
        conv.weight = [
            [[
                [0.1022217, -0.2990429, -0.00128791],
                [0.19702038, 0.2377766, -0.26631758],
                [0.13468763, 0.15147987, 0.17658153],
            ]],
            [[
                [-0.28261143, 0.22986522, -0.23906478],
                [0.2649006, 0.2315791, -0.1839219],
                [-0.23470804, 0.25393584, 0.10693645],
            ]],
        ];
        conv.bias = [-0.24373719, 0.20181063];
        let x = [[
            [0.31053752, 0.7199225, 0.43577182],
            [0.5588689, 0.87854236, 0.03064412],
            [0.6246787, 0.7104719, 0.34061056],
        ]];
        let y = conv.forward::<3, 3, 3, 3>(&x);
        let t = [
            [
                [-0.12183491, 0.08633745, 0.12468931],
                [-0.21853128, 0.13490605, 0.02720466],
                [-0.45267165, -0.24807255, 0.05787167],
            ],
            [
                [0.37718016, 0.46584255, 0.29501486],
                [0.30352712, 0.5914381, 0.2580838],
                [0.13423777, 0.5058508, 0.22765125],
            ],
        ];
        for i_chan in 0..2 {
            for i_row in 0..3 {
                for i_col in 0..3 {
                    assert!(
                        (y[i_chan][i_row][i_col] - t[i_chan][i_row][i_col]) < 1e-6,
                        "y={:?}\nt={:?}\n",
                        y,
                        t
                    );
                }
            }
        }
    }

    #[test]
    fn test_pad1_stride1_v2() {
        let mut conv: Conv2d<1, 2, 2, 1, 1, 1> = Default::default();
        conv.weight = [
            [[[-0.05767131, 0.29223222], [0.12310421, 0.4551205]]],
            [[[-0.42312527, -0.10522532], [-0.44393647, -0.34403402]]],
        ];
        conv.bias = [-0.44340342, -0.04786187];
        let x = [[
            [0.31053752, 0.7199225, 0.43577182],
            [0.5588689, 0.87854236, 0.03064412],
            [0.6246787, 0.7104719, 0.34061056],
        ]];
        let y = conv.forward::<3, 3, 4, 4>(&x);
        let t = [
            [
                [-0.30207145, -0.07752347, -0.15644926, -0.38975808],
                [-0.09830165, 0.21771383, -0.23547669, -0.46476254],
                [0.00422016, 0.18135518, -0.24263397, -0.4032401],
                [-0.2608522, -0.2718067, -0.3848399, -0.46304688],
            ],
            [
                [-0.15469734, -0.4333986, -0.517382, -0.24131688],
                [-0.2728082, -0.80536294, -0.79889315, -0.245852],
                [-0.32157975, -0.89852244, -0.85540587, -0.21203762],
                [-0.11359389, -0.38693884, -0.38432136, -0.1919828],
            ],
        ];
        for i_chan in 0..2 {
            for i_row in 0..4 {
                for i_col in 0..4 {
                    assert!(
                        (y[i_chan][i_row][i_col] - t[i_chan][i_row][i_col]) < 1e-6,
                        "y={:?}\nt={:?}\n",
                        y,
                        t
                    );
                }
            }
        }
    }

    #[test]
    fn test_pad1_stride3() {
        let mut conv: Conv2d<2, 4, 3, 1, 1, 3> = Default::default();
        conv.weight = [
            [
                [
                    [0.14617981, 0.11528827, -0.09853071],
                    [-0.07204299, 0.00336616, 0.10673852],
                    [0.00742291, 0.11231156, 0.2337733],
                ],
                [
                    [-0.12326456, 0.09475489, 0.00286931],
                    [-0.11880011, -0.02660868, 0.07172234],
                    [0.2074004, 0.03104086, 0.04103799],
                ],
            ],
            [
                [
                    [0.21327908, 0.1421523, -0.05588683],
                    [-0.11007029, 0.21513708, -0.00373882],
                    [-0.1405331, -0.21004112, 0.14830004],
                ],
                [
                    [0.20064591, 0.01574595, 0.20489053],
                    [0.22750203, 0.0800796, 0.04829051],
                    [-0.14500698, -0.05896148, 0.00155589],
                ],
            ],
            [
                [
                    [-0.15640959, 0.06537981, -0.04286686],
                    [-0.18440281, 0.19307987, -0.17548376],
                    [-0.16365337, -0.19908702, -0.11890511],
                ],
                [
                    [0.1236528, -0.02123187, 0.09672363],
                    [0.12256287, -0.1111846, -0.07555458],
                    [0.00952002, -0.20669132, 0.07111661],
                ],
            ],
            [
                [
                    [0.2330633, -0.15059352, -0.15611872],
                    [-0.17001018, 0.14806725, 0.16246979],
                    [-0.05100261, 0.03655182, 0.03957109],
                ],
                [
                    [-0.17500071, -0.16877688, -0.12116098],
                    [0.08597867, 0.2115535, -0.06175958],
                    [0.17978726, -0.1459909, -0.03851977],
                ],
            ],
        ];
        conv.bias = [0.20518447, 0.19566856, -0.00938936, 0.03015544];
        let x = [
            [
                [
                    0.21057081, 0.7208752, 0.45118594, 0.02713799, 0.68024296, 0.3910358,
                    0.23223233, 0.41766483, 0.91346294,
                ],
                [
                    0.2500931, 0.12637055, 0.1272502, 0.51244897, 0.4964708, 0.8277718, 0.59300315,
                    0.20171815, 0.36267585,
                ],
                [
                    0.38347948, 0.9041415, 0.899777, 0.13333935, 0.36263585, 0.25092953,
                    0.01967365, 0.8455198, 0.7374019,
                ],
                [
                    0.3127641, 0.16012222, 0.8803009, 0.42519283, 0.03213924, 0.28457332,
                    0.11092412, 0.7152574, 0.412224,
                ],
                [
                    0.02153009, 0.4150746, 0.3453967, 0.29103887, 0.77954763, 0.14238816,
                    0.89460665, 0.40737927, 0.25643557,
                ],
                [
                    0.8341871, 0.15114868, 0.503467, 0.05420381, 0.90553546, 0.76879644, 0.9369356,
                    0.39110446, 0.314408,
                ],
                [
                    0.46065217, 0.14885396, 0.03641135, 0.658757, 0.14085609, 0.30918586,
                    0.4080497, 0.37957066, 0.4732889,
                ],
                [
                    0.07997447, 0.3393948, 0.45755583, 0.4620967, 0.05732316, 0.6345551, 0.8626297,
                    0.3647226, 0.33206326,
                ],
                [
                    0.9571505, 0.5728258, 0.41579878, 0.55097336, 0.26232815, 0.91751957,
                    0.0674867, 0.36741936, 0.81730753,
                ],
            ],
            [
                [
                    0.7533369, 0.3351096, 0.20795238, 0.64170164, 0.08985782, 0.96100605,
                    0.55665845, 0.5729717, 0.6419061,
                ],
                [
                    0.0928914, 0.5336605, 0.6168807, 0.98969394, 0.3537085, 0.13544858, 0.15680116,
                    0.09755313, 0.84776443,
                ],
                [
                    0.7369501, 0.23981953, 0.6761897, 0.904716, 0.47997457, 0.71871966, 0.7341236,
                    0.08496976, 0.71287054,
                ],
                [
                    0.5947141, 0.35914594, 0.8863333, 0.19789106, 0.8543512, 0.46718287, 0.2856838,
                    0.3525315, 0.04213792,
                ],
                [
                    0.33818644, 0.41329008, 0.49908864, 0.76561147, 0.14832914, 0.64022946,
                    0.84428936, 0.3323446, 0.6859826,
                ],
                [
                    0.4561953, 0.8572295, 0.9829912, 0.2284044, 0.1273588, 0.45776683, 0.02060169,
                    0.5639244, 0.21596754,
                ],
                [
                    0.9491337, 0.02133191, 0.596267, 0.74133545, 0.05190426, 0.10490572, 0.5913261,
                    0.73797053, 0.4090029,
                ],
                [
                    0.10168785, 0.28168315, 0.5618286, 0.50776577, 0.3526731, 0.5083848,
                    0.88234985, 0.36654603, 0.6237142,
                ],
                [
                    0.45444447, 0.18045723, 0.86170214, 0.2762791, 0.6174765, 0.30022788,
                    0.19892776, 0.07195282, 0.22581935,
                ],
            ],
        ];
        let y = conv.forward::<9, 9, 3, 3>(&x);
        // assert_eq!(W_OUT, ((W_IN + 2 * PADDING - KERNEL_SIZE + 1) / STRIDE));
        // 7 + 2 - 3 + 1
        // 7
        let t = [
            [
                [0.3692422, 0.5577823, 0.29135567],
                [0.38581508, 0.5631167, 0.5298315],
                [0.42890364, 0.2398901, 0.71326447],
            ],
            [
                [0.27634868, 0.05319048, 0.25220025],
                [0.4297849, 0.776384, 0.2243587],
                [0.6921845, 0.5580633, 0.4964255],
            ],
            [
                [-0.25037688, -0.61478406, -0.3990448],
                [-0.17064369, -0.4600212, -0.55443037],
                [0.01031597, -0.16011265, -0.59833616],
            ],
            [
                [0.29715353, 0.20075348, 0.21606356],
                [-0.19430616, -0.18607897, -0.1226138],
                [-0.0173984, 0.10020237, -0.02460488],
            ],
        ];
        for i_chan in 0..4 {
            for i_row in 0..3 {
                for i_col in 0..3 {
                    assert!(
                        (y[i_chan][i_row][i_col] - t[i_chan][i_row][i_col]) < 1e-6,
                        "y={:?}\nt={:?}\n",
                        y,
                        t
                    );
                }
            }
        }
    }

    #[test]
    fn test_diff_paddings() {
        let mut conv: Conv2d<2, 4, 3, 1, 0, 3> = Default::default();

        conv.weight = [
            [
                [
                    [-0.16951475, 0.18148716, 0.11452983],
                    [-0.05653553, -0.12347288, 0.1437112],
                    [0.11910407, 0.09197839, -0.19396508],
                ],
                [
                    [0.2284107, 0.0551682, -0.21032758],
                    [0.16945575, 0.16806488, 0.11360888],
                    [0.17211585, -0.23254138, -0.14311942],
                ],
            ],
            [
                [
                    [0.15108018, 0.2310238, -0.07898572],
                    [0.09268294, 0.16065855, -0.02468468],
                    [0.04045774, 0.11338453, -0.13995044],
                ],
                [
                    [-0.23541123, 0.09708233, -0.1154344],
                    [-0.07918043, 0.14908992, -0.23269427],
                    [0.1471413, -0.18606442, -0.07318471],
                ],
            ],
            [
                [
                    [-0.05816181, -0.07883959, -0.1241257],
                    [-0.17616543, -0.19186923, 0.0532635],
                    [0.08541082, 0.0948873, 0.1106682],
                ],
                [
                    [0.1407726, -0.18328246, -0.20389993],
                    [-0.18750295, -0.00620356, 0.1526462],
                    [0.01116495, -0.19061024, 0.17295755],
                ],
            ],
            [
                [
                    [-0.15338722, 0.11304025, -0.13875616],
                    [0.170949, 0.05909871, -0.09674671],
                    [-0.00352511, 0.10647057, -0.17724186],
                ],
                [
                    [-0.18874522, -0.16570199, -0.00518005],
                    [0.05784269, -0.0508645, 0.08142553],
                    [-0.12230667, 0.14570008, 0.05119579],
                ],
            ],
        ];
        conv.bias = [0.04838754, 0.07195146, -0.03947061, 0.17069755];

        let x = [
            [
                [
                    0.8835113, 0.13882023, 0.7315728, 0.6014649, 0.29594523, 0.46894914, 0.8524046,
                    0.45359534, 0.43056685,
                ],
                [
                    0.1012792, 0.05108845, 0.25242734, 0.8690395, 0.32797933, 0.05993927,
                    0.7875964, 0.00939852, 0.23371905,
                ],
                [
                    0.7273682, 0.39719957, 0.9026962, 0.18514287, 0.9099473, 0.6830876, 0.8096039,
                    0.5167066, 0.83929837,
                ],
                [
                    0.6798897, 0.6469037, 0.37039953, 0.880702, 0.49907035, 0.05726093, 0.7798417,
                    0.9619096, 0.5043428,
                ],
                [
                    0.2669297, 0.8015939, 0.95740455, 0.6020198, 0.87445277, 0.7183642, 0.54205835,
                    0.68437976, 0.82951576,
                ],
                [
                    0.5435678, 0.4369346, 0.4174738, 0.8460932, 0.13418722, 0.55912274, 0.1456281,
                    0.800143, 0.07224685,
                ],
                [
                    0.95401746, 0.2754792, 0.03196198, 0.5022102, 0.1791898, 0.08201677, 0.706302,
                    0.57362723, 0.3891986,
                ],
            ],
            [
                [
                    0.25238568, 0.6502806, 0.5196041, 0.3642316, 0.6576511, 0.12723362, 0.7020561,
                    0.18168187, 0.5960324,
                ],
                [
                    0.23093349, 0.14747256, 0.6867326, 0.85302174, 0.39524788, 0.4955296,
                    0.8853273, 0.60563225, 0.9854223,
                ],
                [
                    0.08876747, 0.84838796, 0.7440208, 0.6717199, 0.9986871, 0.16444528, 0.8884909,
                    0.11773419, 0.16389328,
                ],
                [
                    0.12747067, 0.62013346, 0.31473154, 0.5395161, 0.07182807, 0.17038721,
                    0.9332434, 0.3214336, 0.91524035,
                ],
                [
                    0.82844126, 0.5781982, 0.13706946, 0.73159313, 0.50984377, 0.62877065,
                    0.24265271, 0.08741719, 0.5145434,
                ],
                [
                    0.50140876, 0.99232125, 0.6318608, 0.7825543, 0.9962608, 0.27447134,
                    0.82021457, 0.7088084, 0.789743,
                ],
                [
                    0.22269273, 0.14444828, 0.810514, 0.17407775, 0.48010093, 0.48212987,
                    0.5515393, 0.01245189, 0.29415256,
                ],
            ],
        ];

        let y = conv.forward::<9, 7, 3, 3>(&x);

        let t = [
            [
                [0.17249039, 0.33797365, 0.14313158],
                [0.01598295, 0.38415283, 0.4161861],
                [0.19046798, 0.29555833, 0.31168252],
            ],
            [
                [0.04498426, 0.28293645, -0.00831042],
                [0.31679663, 0.25450188, -0.02866032],
                [0.07459396, 0.08634683, 0.09541086],
            ],
            [
                [-0.02014766, -0.09831435, -0.13660741],
                [-0.59615356, -0.41860208, -0.21566784],
                [-0.5356276, -0.37756905, -0.5678168],
            ],
            [
                [0.27173287, 0.24347454, 0.36867434],
                [-0.15768422, 0.05384711, -0.01273608],
                [0.06425115, -0.22228895, 0.12463954],
            ],
        ];

        for i_chan in 0..4 {
            for i_row in 0..3 {
                for i_col in 0..3 {
                    assert!(
                        (y[i_chan][i_row][i_col] - t[i_chan][i_row][i_col]) < 1e-6,
                        "y={:?}\nt={:?}\n",
                        y,
                        t
                    );
                }
            }
        }
    }
}
